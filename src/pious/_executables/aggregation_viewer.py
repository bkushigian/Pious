"""
This module gives an executable interface for aggregation reports. This should
be launched `python -m pious aggregation_viewer`
"""

from argparse import Namespace, _SubParsersAction
from ..pio.aggregation import AggregationReport
from code import InteractiveConsole
from matplotlib import pyplot as plt
from ansi.color import fg, fx

banner = f"""
Launching interactive aggregation report session. Variable `ar` stores the
aggregation report. Use

+ `{fx.bold}{fg.blue}ar.filter("..."){fx.reset}` to filter the report.
+ `{fx.bold}{fg.blue}ar.reset(){fx.reset}` to reset all filters
+ `{fx.bold}{fg.blue}ar.plot(){fx.reset}` to plot the report

"""


def register_command(sub_parsers: _SubParsersAction):

    parser_agg = sub_parsers.add_parser(
        "aggregation_viewer",
        description="Utility module for viewing piosolver aggregation reports",
    )

    parser_agg.set_defaults(function=exec_aggregation_main)

    parser_agg.add_argument(
        "report_dir",
        nargs="?",
        help="Path to directory with report.csv (generated by Pio). Defaults to current directory.",
    )
    parser_agg.add_argument(
        "cfr_database",
        nargs="?",
        help="Path to CFR Database (cfr files that report was generated from) (optional).",
    )
    parser_agg.add_argument(
        "--interactive",
        action="store_true",
        help="Launch python interactive session with AggregationReport loaded",
    )
    parser_agg.add_argument("--filter", help="Filter aggregation report")
    parser_agg.add_argument(
        "--plot", action="store_true", help="Plot aggregation report"
    )


def exec_aggregation_main(args: Namespace):
    report_dir = args.report_dir
    if report_dir is None:
        report_dir = "."
    try:
        ar = AggregationReport(report_dir, args.cfr_database)
    except RuntimeError as e:
        print(f"Couldn't load aggregation report for reports directory '{report_dir}'")
        return

    if args.filter:
        try:
            ar.filter(args.filter)
        except RuntimeError as e:
            print(f'Couldn\'t apply filter "{args.filter}"')
            print(e.args)

    if args.plot:

        plt.ioff()
        ar.plot()
        plt.ion()
    if args.interactive:
        InteractiveConsole(locals={"ar": ar}).interact(banner=banner)
    else:
        ar.paginate()
